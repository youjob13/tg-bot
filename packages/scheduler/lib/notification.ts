import * as Bot from '@ann-nails/bot';
import * as Config from '@ann-nails/config';
import { requestCollection, scheduleCollection } from '@ann-nails/db';
import { schedulerLogger } from '@ann-nails/logger';
import { formatToDate, getNonNullableValues } from '@ann-nails/shared';
import { CronJob } from 'cron';

const ONE_DAY = 24 * 60 * 60 * 1000;

const pushNotification = async () => {
    try {
        const now = Date.now();
        const dates = await scheduleCollection.getBookedNotNotifiedDates();

        const needNotificationDates = dates.filter(({ timestamp }) => timestamp - now < ONE_DAY);

        if (needNotificationDates.length === 0) {
            return;
        }

        const needNotificationRequests = getNonNullableValues(
            await Promise.all(
                needNotificationDates.map(async ({ timestamp }) =>
                    requestCollection.getApprovedRequestByDate(timestamp),
                ),
            ),
        );

        for (const request of needNotificationRequests) {
            const userNotificationPromise = Bot.bot.api.sendMessage(
                request.chatId,
                `–ü—Ä–∏–≤–µ—Çüêà‚Äç‚¨õ –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Ç—ã –∑–∞–ø–∏—Å–∞–Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä, –∂–¥—É —Ç–µ–±—èü§ç \n–î–∞—Ç–∞: ${formatToDate(
                    request.date,
                )} `,
            );
            const adminNotificationPromise = Bot.bot.api.sendMessage(
                Config.ADMIN_ID_2,
                `–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n ${request.userFullName}\n @${request.username}\n ${formatToDate(request.date)}\n ${
                    request.userCustomData ?? '[–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã]'
                }`,
            );
            const markDateAsNotifiedPromise = scheduleCollection.markDateIsNotified(request.date);

            await Promise.all([userNotificationPromise, adminNotificationPromise, markDateAsNotifiedPromise]);
        }
    } catch (error) {
        schedulerLogger.error('error', error);
    }
};

const job = new CronJob('0 0 * * * *', pushNotification, null, false, Config.TZ);

export default job;
